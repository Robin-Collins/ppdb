openapi: 3.0.1
info:
  title: PPDB API
  version: 1.0.0
  description: API to manage animals, breeds, customers, and notes with user authentication for the Pampered Pooch
servers:
  - url: http://localhost:8080/api
paths:
  /animals:
    get:
      summary: List all animals
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "animalname,asc"
      responses:
        '200':
          description: A list of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new animal
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        '201':
          description: Animal created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /animals/{animalID}:
    get:
      summary: Get an animal by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: animalID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An animal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update an animal
      security:
        - ApiKeyAuth: []
      parameters:
        - name: animalID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        '200':
          description: Animal updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete an animal
      security:
        - ApiKeyAuth: []
      parameters:
        - name: animalID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Animal deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /breeds:
    get:
      summary: List all breeds
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "breedname,asc"
      responses:
        '200':
          description: A list of breeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Breed'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new breed
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Breed'
      responses:
        '201':
          description: Breed created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /breeds/{breedID}:
    get:
      summary: Get a breed by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: breedID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A breed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Breed'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a breed
      security:
        - ApiKeyAuth: []
      parameters:
        - name: breedID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Breed'
      responses:
        '200':
          description: Breed updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a breed
      security:
        - ApiKeyAuth: []
      parameters:
        - name: breedID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Breed deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /customers:
    get:
      summary: List all customers
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "surname,asc"
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new customer
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /customers/{customerID}:
    get:
      summary: Get a customer by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customerID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a customer
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customerID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a customer
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customerID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /customers/{customerID}/animals:
    get:
      summary: List all animals owned by a customer
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customerID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /animals/{animalID}/notes:
    get:
      summary: List all notes for an animal
      security:
        - ApiKeyAuth: []
      parameters:
        - name: animalID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /notes:
    get:
      summary: List all notes
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "date,desc"
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new note
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        '201':
          description: Note created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /notes/{noteID}:
    get:
      summary: Get a note by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: noteID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a note
      security:
        - ApiKeyAuth: []
      parameters:
        - name: noteID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        '200':
          description: Note updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a note
      security:
        - ApiKeyAuth: []
      parameters:
        - name: noteID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Note deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /users:
    get:
      summary: List all users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new user
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userID}:
    get:
      summary: Get a user by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /search:
    get:
      summary: Search across customers and animals
      security:
        - ApiKeyAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    animalName:
                      type: string
                    customerFirstName:
                      type: string
                    customerSurname:
                      type: string
                    email:
                      type: string
                    phone:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    Animal:
      type: object
      properties:
        animalID:
          type: integer
        animalname:
          type: string
        breedID:
          type: integer
        customerID:
          type: integer
        SEX:
          type: string
          enum:
            - Male
            - Female
        colour:
          type: string
        cost:
          type: integer
        lastvisit:
          type: string
          format: date
        thisvisit:
          type: string
          format: date
        comments:
          type: string
    Breed:
      type: object
      properties:
        breedID:
          type: integer
        breedname:
          type: string
        avgtime:
          type: string
          format: time
        avgcost:
          type: integer
    Customer:
      type: object
      properties:
        customerID:
          type: integer
        surname:
          type: string
        firstname:
          type: string
        address:
          type: string
        suburb:
          type: string
        postcode:
          type: integer
        phone1:
          type: string
        phone2:
          type: string
        phone3:
          type: string
        email:
          type: string
    Note:
      type: object
      properties:
        noteID:
          type: integer
        animalID:
          type: integer
        notes:
          type: string
        date:
          type: string
          format: date
    User:
      type: object
      properties:
        userID:
          type: integer
        username:
          type: string
        password:
          type: string
        email:
          type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad Request"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
