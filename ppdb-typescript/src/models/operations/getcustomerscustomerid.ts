/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCustomersCustomerIDRequest = {
    customerID: number;
};

export type GetCustomersCustomerIDResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A customer
     */
    customer?: components.Customer | undefined;
};

/** @internal */
export namespace GetCustomersCustomerIDRequest$ {
    export const inboundSchema: z.ZodType<GetCustomersCustomerIDRequest, z.ZodTypeDef, unknown> = z
        .object({
            customerID: z.number().int(),
        })
        .transform((v) => {
            return {
                customerID: v.customerID,
            };
        });

    export type Outbound = {
        customerID: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCustomersCustomerIDRequest> =
        z
            .object({
                customerID: z.number().int(),
            })
            .transform((v) => {
                return {
                    customerID: v.customerID,
                };
            });
}

/** @internal */
export namespace GetCustomersCustomerIDResponse$ {
    export const inboundSchema: z.ZodType<GetCustomersCustomerIDResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Customer: components.Customer$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Customer === undefined ? null : { customer: v.Customer }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Customer?: components.Customer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCustomersCustomerIDResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                customer: components.Customer$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.customer === undefined ? null : { Customer: v.customer }),
                };
            });
}
