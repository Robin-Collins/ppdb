/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetUsersResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of users
     */
    users?: Array<components.User> | undefined;
};

/** @internal */
export namespace GetUsersResponse$ {
    export const inboundSchema: z.ZodType<GetUsersResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Users: z.array(components.User$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Users === undefined ? null : { users: v.Users }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Users?: Array<components.User$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUsersResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            users: z.array(components.User$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.users === undefined ? null : { Users: v.users }),
            };
        });
}
