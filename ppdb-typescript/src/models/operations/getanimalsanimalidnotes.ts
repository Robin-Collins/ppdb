/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAnimalsAnimalIDNotesRequest = {
    animalID: number;
};

export type GetAnimalsAnimalIDNotesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of notes
     */
    notes?: Array<components.Note> | undefined;
};

/** @internal */
export namespace GetAnimalsAnimalIDNotesRequest$ {
    export const inboundSchema: z.ZodType<GetAnimalsAnimalIDNotesRequest, z.ZodTypeDef, unknown> = z
        .object({
            animalID: z.number().int(),
        })
        .transform((v) => {
            return {
                animalID: v.animalID,
            };
        });

    export type Outbound = {
        animalID: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAnimalsAnimalIDNotesRequest> =
        z
            .object({
                animalID: z.number().int(),
            })
            .transform((v) => {
                return {
                    animalID: v.animalID,
                };
            });
}

/** @internal */
export namespace GetAnimalsAnimalIDNotesResponse$ {
    export const inboundSchema: z.ZodType<GetAnimalsAnimalIDNotesResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                Notes: z.array(components.Note$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.Notes === undefined ? null : { notes: v.Notes }),
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Notes?: Array<components.Note$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAnimalsAnimalIDNotesResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            notes: z.array(components.Note$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.notes === undefined ? null : { Notes: v.notes }),
            };
        });
}
