/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as z from "zod";

export type Note = {
    noteID?: number | undefined;
    animalID?: number | undefined;
    notes?: string | undefined;
    date?: RFCDate | undefined;
};

/** @internal */
export namespace Note$ {
    export const inboundSchema: z.ZodType<Note, z.ZodTypeDef, unknown> = z
        .object({
            noteID: z.number().int().optional(),
            animalID: z.number().int().optional(),
            notes: z.string().optional(),
            date: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.noteID === undefined ? null : { noteID: v.noteID }),
                ...(v.animalID === undefined ? null : { animalID: v.animalID }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.date === undefined ? null : { date: v.date }),
            };
        });

    export type Outbound = {
        noteID?: number | undefined;
        animalID?: number | undefined;
        notes?: string | undefined;
        date?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Note> = z
        .object({
            noteID: z.number().int().optional(),
            animalID: z.number().int().optional(),
            notes: z.string().optional(),
            date: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.noteID === undefined ? null : { noteID: v.noteID }),
                ...(v.animalID === undefined ? null : { animalID: v.animalID }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.date === undefined ? null : { date: v.date }),
            };
        });
}
