/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Unauthorized
 */
export type UnauthorizedErrorData = {
    message?: string | undefined;
};

/**
 * Unauthorized
 */
export class UnauthorizedError extends Error {
    /** The original data that was passed to this error instance. */
    data$: UnauthorizedErrorData;

    constructor(err: UnauthorizedErrorData) {
        super("");
        this.data$ = err;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "UnauthorizedError";
    }
}

/** @internal */
export namespace UnauthorizedError$ {
    export const inboundSchema: z.ZodType<UnauthorizedError, z.ZodTypeDef, unknown> = z
        .object({
            message: z.string().optional(),
        })
        .transform((v) => {
            return new UnauthorizedError({
                ...(v.message === undefined ? null : { message: v.message }),
            });
        });

    export type Outbound = {
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnauthorizedError> = z
        .instanceof(UnauthorizedError)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    message: z.string().optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.message === undefined ? null : { message: v.message }),
                    };
                })
        );
}
